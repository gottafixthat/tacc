/*
** $Id: mailwrap.cpp,v 1.4 1999/09/09 17:46:47 marc Exp $
**
** mailwrap.cpp - A very small and simple program that runs from cron that
**                scans /var/spool/taamail and mails all of the files in it
**                to the users specified within the file.  It removes the
**                files when it has sent them.
**
**                This should allow TAA running as any user to "become"
**                another user for the purpose of sending mail to users.
**
*****************************************************************************
**
**  (C)opyright 1998, 1999 by R. Marc Lewis and Blarg! Online Services, Inc.
**  All Rights Reserved
**
**  Unpublished work.  No portion of this file may be reproduced in whole
**  or in part by any means, electronic or otherwise, without the express
**  written consent of Blarg! Online Services and R. Marc Lewis.
**
*****************************************************************************
*/

#include <mimepp/config.h>
#include <mimepp/protocol.h>
#include <mimepp/string.h>
#include <mimepp/smtp.h>
#include <mimepp/message.h>
#include <mimepp/headers.h>
#include <mimepp/text.h>
#include <mimepp/mboxlist.h>
#include <mimepp/mailbox.h>

#include <syslog.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <qdir.h>
#include <qstring.h>

#define MAXMSGS     100
#define INBUFSIZE   1024
#define SMTPHOST    "mail.blarg.net"
#define BIGBUFSIZE  262144

int msgCount = 0;

void scanDir(void);

int main ()
{
    openlog("taamail", LOG_PID|LOG_NDELAY, LOG_INFO);
    scanDir();
    syslog(LOG_INFO, "Sent %d messages.", msgCount);
    closelog();
    exit(0);
}

/*
** scanDir - Scans the directory and gets a listing of all of the files in it.
*/

void scanDir(void)
{
    char     tmpbuf[1024];
    char     fromline[1024];
    char     toaddr[1024];
    QCString tmpstr;
    QCString tmpstr2;
    FILE     *src;
    QDir     dir("/var/spool/taamail");
    char     *bigbuf;
    
    // Our SMTP stuff
    DwSmtpClient    smtp;
    
    const   QFileInfoList   *list = dir.entryInfoList();
    QFileInfoListIterator it(*list);
    QFileInfo *fi;
    // printf(" Bytes, File Name\n");
    while((fi = it.current())) {
        if (fi->isFile()) {
            if (!smtp.IsOpen()) {
                if (!smtp.Open(SMTPHOST)) {
                    syslog(LOG_INFO, "Unable to connect to mail host '%s'", SMTPHOST);
                    return;
                } else {
                    if (!smtp.Helo()) {
                        smtp.Close();
                        syslog(LOG_INFO, "HELO command failed when talking to mail host '%s'", SMTPHOST);
                        return;
                    }
                }
            }
            
            // One more check to make sure...
            if (!smtp.IsOpen()) {
                syslog(LOG_INFO, "Our SMTP connection to '%s' was pulled out from under us", SMTPHOST);
            }
        
            // printf("%10i %s\n", fi->size(), fi->fileName().data());
            sprintf(tmpbuf, "/var/spool/taamail/%s", fi->fileName().data());
            src = fopen(tmpbuf, "r");
            if (src != NULL) {
                // First, lets get the from Line out of the message
                strcpy(fromline, "");
                while(fgets(tmpbuf, sizeof(tmpbuf), src)) {
                    tmpstr.setStr(tmpbuf);
                    if (tmpstr.find("From:", 0, FALSE) == 0) {
                        tmpstr2 = tmpstr.simplifyWhiteSpace();
                        tmpstr  = tmpstr2;
                        tmpstr2 = tmpstr.remove(0, 6);
                        strcpy(fromline, tmpstr2);
                        continue;
                    }
                }
                rewind(src);
                
                // Now, lets get the to Line out of the message
                strcpy(toaddr, "");
                while(fgets(tmpbuf, sizeof(tmpbuf), src)) {
                    tmpstr.setStr(tmpbuf);
                    if (tmpstr.find("To:", 0, FALSE) == 0) {
                        tmpstr2 = tmpstr.simplifyWhiteSpace();
                        tmpstr  = tmpstr2;
                        tmpstr2 = tmpstr.remove(0, 4);
                        if (tmpstr2.find("@") < 0) {
                            tmpstr2.append("@blarg.net");
                        }
                        strcpy(toaddr, tmpstr2);
                        continue;
                    }
                }
                rewind(src);
                
                // We need a large buffer to hold the message to scan it.
                bigbuf = new(char[BIGBUFSIZE]);
                
                // Read the file into our bigbuf
                if (!fread(bigbuf, sizeof(char), BIGBUFSIZE, src)) {
                    syslog(LOG_INFO, "Unable to read from source file '%s'", (const char *) fi->fileName().data());
                    fclose(src);
                    smtp.Close();
                    return;
                }
                // We're done with the source file.
                fclose(src);
                
                if (strlen(fromline)) {
                    sprintf(tmpbuf, "/usr/sbin/sendmail -t -f\"%s\"", fromline);
                } else {
                    sprintf(fromline, "support@blarg.net");
                    sprintf(tmpbuf, "/usr/sbin/sendmail -t -fsupport@blarg.net");
                }
                
                if (!strlen(toaddr)) {
                    syslog(LOG_INFO, "File %s has no To: address", (const char *) fi->fileName().data());
                } else {
                    // Set the from address.
                    if (!smtp.Mail(fromline)) {
                        syslog(LOG_INFO, "The SMTP server did not accept the from address of '%s'", fromline);
                        smtp.Close();
                        return;
                    }

                    // Set the recipient.
                    if (!smtp.Rcpt(toaddr)) {
                        syslog(LOG_INFO, "The SMTP server did not accept the To address of '%s'", toaddr);
                        smtp.Close();
                        return;
                    }

                    // Tell the server we're about to start sending data.
                    if (!smtp.Data()) {
                        syslog(LOG_INFO, "The SMTP server '%s' rejected our DATA command", SMTPHOST);
                        smtp.Close();
                        return;
                    }

                    // If we've made it here, we're good to send the
                    // message.
                    if (!smtp.SendData(bigbuf, strlen(bigbuf))) {
                        syslog(LOG_INFO, "The SMTP server '%s' had an error with our message body", SMTPHOST);
                        smtp.Close();
                        return;
                    }

                    // If we've made it here, it is safe to remove the
                    // source file.
                    sprintf(tmpbuf, "/var/spool/taamail/%s", fi->fileName().data());
                    unlink(tmpbuf);
                    
                    syslog(LOG_INFO, "message %s sent from %s to %s\n", (const char *) fi->fileName().data(), fromline, toaddr);
                    ++msgCount;
                }                             
                delete(bigbuf);
                
            } else {
                printf("Unable to open /var/spool/taamail/%s\n", fi->fileName().data());
            }
        }
        sleep(1);
        if (msgCount > MAXMSGS) {
            syslog(LOG_INFO, "Sent %d messages (reached maximum per pass)", MAXMSGS);
            return;
        }
        ++it;
    }
    smtp.Close();
}



